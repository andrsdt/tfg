{
  "openapi": "3.0.3",
  "info": {
    "title": "Grocerin API",
    "version": "1.0.0"
  },
  "paths": {
    "/auth/login/": {
      "post": {
        "operationId": "auth_login_create",
        "description": "Check the credentials and return the REST Token\nif the credentials are valid and authenticated.\nCalls Django Auth login method to register User ID\nin Django session framework\n\nAccept the following POST parameters: username, password\nReturn the REST Framework Token Object's key.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomLoginRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomLoginRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomLoginRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/logout/": {
      "get": {
        "operationId": "auth_logout_retrieve",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "auth_logout_create",
        "description": "Calls Django logout method and delete the Token object\nassigned to the current User object.\n\nAccepts/Returns nothing.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/password/change/": {
      "post": {
        "operationId": "auth_password_change_create",
        "description": "Calls Django Auth SetPasswordForm save method.\n\nAccepts the following POST parameters: new_password1, new_password2\nReturns the success/fail message.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/password/reset/": {
      "post": {
        "operationId": "auth_password_reset_create",
        "description": "Calls Django Auth PasswordResetForm save method.\n\nAccepts the following POST parameters: email\nReturns the success/fail message.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/password/reset/confirm/": {
      "post": {
        "operationId": "auth_password_reset_confirm_create",
        "description": "Password reset e-mail link is confirmed, therefore\nthis resets the user's password.\n\nAccepts the following POST parameters: token, uid,\n    new_password1, new_password2\nReturns the success/fail message.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/registration/": {
      "post": {
        "operationId": "auth_registration_create",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomRegisterRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomRegisterRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomRegisterRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestAuthDetail"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/set-csrf/": {
      "get": {
        "operationId": "auth_set_csrf_retrieve",
        "description": "Retrieves the CSRF token and sets it as a cookie.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/auth/user/": {
      "get": {
        "operationId": "auth_user_retrieve",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserDetails"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "auth_user_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomUserDetailsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CustomUserDetailsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CustomUserDetailsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserDetails"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "auth_user_partial_update",
        "description": "Reads and updates UserModel fields\nAccepts GET, PUT, PATCH methods.\n\nDefault accepted fields: username, first_name, last_name\nDefault display fields: pk, username, email, first_name, last_name\nRead-only fields: pk, email\n\nReturns UserModel fields.",
        "tags": ["auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCustomUserDetailsRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCustomUserDetailsRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCustomUserDetailsRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomUserDetails"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/auth/user/delete/": {
      "delete": {
        "operationId": "auth_user_delete_destroy",
        "description": "A viewset for deleting the user's account.",
        "tags": ["auth"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/chats/": {
      "get": {
        "operationId": "chats_list",
        "parameters": [
          {
            "in": "query",
            "name": "listing",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["chats"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConversationPreview"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "chats_create",
        "tags": ["chats"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversationCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ConversationCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ConversationCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/chats/{id}/": {
      "get": {
        "operationId": "chats_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this conversation.",
            "required": true
          }
        ],
        "tags": ["chats"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/listings/": {
      "get": {
        "operationId": "listings_list",
        "parameters": [
          {
            "in": "query",
            "name": "allergens",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "available_quantity_max",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "available_quantity_min",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "distance",
            "schema": {
              "type": "string",
              "enum": ["1000", "10000", "100000", "5000", "50000"]
            },
            "description": "* `1000` - <1 km\n* `5000` - <5 km\n* `10000` - <10 km\n* `50000` - <50 km\n* `100000` - <100 km"
          },
          {
            "in": "query",
            "name": "exclude_mine",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "favorite",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "features",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_active",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "-created_at",
                  "-price",
                  "-quantity",
                  "-updated_at",
                  "created_at",
                  "price",
                  "quantity",
                  "updated_at"
                ]
              }
            },
            "description": "Ordering\n\n* `created_at` - Created at\n* `-created_at` - Created at (descending)\n* `updated_at` - Updated at\n* `-updated_at` - Updated at (descending)\n* `quantity` - Quantity\n* `-quantity` - Quantity (descending)\n* `price` - Price\n* `-price` - Price (descending)",
            "explode": false,
            "style": "form"
          },
          {
            "in": "query",
            "name": "price_max",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "price_min",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "producer",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "unit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Listing"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "listings_create",
        "tags": ["listings"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/listings/{id}/": {
      "get": {
        "operationId": "listings_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Listing"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "listings_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ListingCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCreate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "listings_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedListingCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedListingCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedListingCreateRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCreate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "listings_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/listings/{id}/activate/": {
      "post": {
        "operationId": "listings_activate_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/listings/{id}/deactivate/": {
      "post": {
        "operationId": "listings_deactivate_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/listings/{id}/dislike/": {
      "post": {
        "operationId": "listings_dislike_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/listings/{id}/like/": {
      "post": {
        "operationId": "listings_like_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this listing.",
            "required": true
          }
        ],
        "tags": ["listings"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/notifications/": {
      "get": {
        "operationId": "notifications_list",
        "tags": ["notifications"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/notifications/count/": {
      "get": {
        "operationId": "notifications_count_retrieve",
        "tags": ["notifications"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Count"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "operationId": "orders_list",
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": ["CONSUMER", "PRODUCER"]
            },
            "description": "* `PRODUCER` - PRODUCER\n* `CONSUMER` - CONSUMER"
          }
        ],
        "tags": ["orders"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "orders_create",
        "tags": ["orders"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/orders/{id}/": {
      "get": {
        "operationId": "orders_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this order.",
            "required": true
          }
        ],
        "tags": ["orders"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/producers/": {
      "post": {
        "operationId": "producers_create",
        "tags": ["producers"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "No response body"
          }
        }
      }
    },
    "/producers/{user}/": {
      "get": {
        "operationId": "producers_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "schema": {
              "type": "integer"
            },
            "description": "A unique value identifying this producer.",
            "required": true
          }
        ],
        "tags": ["producers"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Producer"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "producers_update",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "schema": {
              "type": "integer"
            },
            "description": "A unique value identifying this producer.",
            "required": true
          }
        ],
        "tags": ["producers"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProducerRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProducerRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ProducerRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Producer"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "producers_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "schema": {
              "type": "integer"
            },
            "description": "A unique value identifying this producer.",
            "required": true
          }
        ],
        "tags": ["producers"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProducerRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProducerRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedProducerRequest"
              }
            }
          }
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Producer"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/reports/": {
      "post": {
        "operationId": "reports_create",
        "tags": ["reports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/reviews/": {
      "get": {
        "operationId": "reviews_list",
        "parameters": [
          {
            "in": "query",
            "name": "producer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["reviews"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "reviews_create",
        "tags": ["reviews"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreateRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreateRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ReviewCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewCreate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/reviews/{id}/": {
      "get": {
        "operationId": "reviews_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this review.",
            "required": true
          }
        ],
        "tags": ["reviews"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/users/{id}/": {
      "get": {
        "operationId": "users_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this user.",
            "required": true
          }
        ],
        "tags": ["users"],
        "security": [
          {
            "cookieAuth": []
          },
          {
            "jwtAuth": []
          },
          {}
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicUser"
                }
              }
            },
            "description": ""
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllergenEnum": {
        "enum": [
          "LACTOSE",
          "WHEAT",
          "NUTS",
          "CELERY",
          "CRUSTACEANS",
          "EGG",
          "FISH",
          "GLUTEN",
          "LUPINS",
          "MILK",
          "MOLLUSKS",
          "MUSTARD",
          "PEANUTS",
          "SESAME",
          "SOYBEANS",
          "SULPHITES"
        ],
        "type": "string",
        "description": "* `LACTOSE` - lactose\n* `WHEAT` - wheat\n* `NUTS` - nuts\n* `CELERY` - celery\n* `CRUSTACEANS` - crustaceans\n* `EGG` - egg\n* `FISH` - fish\n* `GLUTEN` - gluten\n* `LUPINS` - lupins\n* `MILK` - milk\n* `MOLLUSKS` - mollusks\n* `MUSTARD` - mustard\n* `PEANUTS` - peanuts\n* `SESAME` - sesame\n* `SOYBEANS` - soybeans\n* `SULPHITES` - sulphites"
      },
      "BasicListing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingImage"
            },
            "readOnly": true
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "price_per_unit": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "g_per_unit": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "producer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicProducer"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "images",
          "price_per_unit",
          "producer",
          "title",
          "unit"
        ]
      },
      "BasicProducer": {
        "type": "object",
        "properties": {
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          }
        },
        "required": ["user"]
      },
      "BasicUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "average_rating": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "number_ratings": {
            "type": "integer",
            "readOnly": true
          },
          "is_producer": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "average_rating",
          "first_name",
          "id",
          "is_producer",
          "last_name",
          "number_ratings"
        ]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "consumer": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "producer": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "listing": {
            "$ref": "#/components/schemas/BasicListing"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "consumer",
          "created_at",
          "id",
          "listing",
          "messages",
          "producer",
          "updated_at"
        ]
      },
      "ConversationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "listing": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "id", "listing", "updated_at"]
      },
      "ConversationCreateRequest": {
        "type": "object",
        "properties": {
          "listing": {
            "type": "integer"
          }
        },
        "required": ["listing"]
      },
      "ConversationPreview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "consumer": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "producer": {
            "$ref": "#/components/schemas/BasicUser"
          },
          "listing": {
            "$ref": "#/components/schemas/BasicListing"
          },
          "last_message": {
            "$ref": "#/components/schemas/Message"
          },
          "unread_messages_count": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "consumer",
          "created_at",
          "id",
          "last_message",
          "listing",
          "producer",
          "unread_messages_count",
          "updated_at"
        ]
      },
      "Count": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          }
        },
        "required": ["count"]
      },
      "CustomLoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          }
        },
        "required": ["email", "password"]
      },
      "CustomRegisterRequest": {
        "type": "object",
        "description": "Serializer for user registration.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          },
          "password1": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "password2": {
            "type": "string",
            "writeOnly": true,
            "minLength": 1
          },
          "first_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "password1",
          "password2"
        ]
      },
      "CustomUserDetails": {
        "type": "object",
        "description": "User model w/o password",
        "properties": {
          "pk": {
            "type": "integer",
            "readOnly": true,
            "title": "ID"
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true,
            "title": "Email address"
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "is_producer": {
            "type": "boolean",
            "readOnly": true
          },
          "has_completed_onboarding": {
            "type": "boolean",
            "readOnly": true
          },
          "photo": {
            "type": "string",
            "format": "uri"
          },
          "phone": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["Point"]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                },
                "example": [12.9721, 77.5933],
                "minItems": 2,
                "maxItems": 3
              }
            },
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "average_rating": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "number_ratings": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "average_rating",
          "created_at",
          "email",
          "first_name",
          "has_completed_onboarding",
          "is_producer",
          "last_name",
          "number_ratings",
          "photo",
          "pk"
        ]
      },
      "CustomUserDetailsRequest": {
        "type": "object",
        "description": "User model w/o password",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "photo": {
            "type": "string",
            "format": "binary"
          },
          "phone": {
            "type": "string",
            "minLength": 1
          },
          "location": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["Point"]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                },
                "example": [12.9721, 77.5933],
                "minItems": 2,
                "maxItems": 3
              }
            },
            "nullable": true
          }
        },
        "required": ["first_name", "last_name", "photo"]
      },
      "FeatureEnum": {
        "enum": [
          "ALLOWS_DELIVERY",
          "ALLOWS_PICKUP",
          "IS_FROZEN",
          "IS_VEGAN",
          "IS_SUGAR_FREE"
        ],
        "type": "string",
        "description": "* `ALLOWS_DELIVERY` - allows_delivery\n* `ALLOWS_PICKUP` - allows_pickup\n* `IS_FROZEN` - is_frozen\n* `IS_VEGAN` - is_vegan\n* `IS_SUGAR_FREE` - is_sugar_free"
      },
      "Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "allergens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAllergen"
            },
            "readOnly": true
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeature"
            },
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingImage"
            },
            "readOnly": true
          },
          "producer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicProducer"
              }
            ],
            "readOnly": true
          },
          "is_favorite": {
            "type": "boolean",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_deleted": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 2000
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "price_per_unit": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "g_per_unit": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true
          },
          "available_quantity": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "allergens",
          "available_quantity",
          "created_at",
          "features",
          "id",
          "images",
          "is_favorite",
          "price_per_unit",
          "producer",
          "title",
          "unit",
          "updated_at"
        ]
      },
      "ListingCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingImage"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "price_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 1
          },
          "g_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 0
          },
          "available_quantity": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1
          },
          "allergens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAllergen"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeature"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_deleted": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "available_quantity",
          "created_at",
          "g_per_unit",
          "id",
          "images",
          "price_per_unit",
          "title",
          "unit",
          "updated_at"
        ]
      },
      "ListingCreateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingImageRequest"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "price_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 1
          },
          "g_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 0
          },
          "available_quantity": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1
          },
          "allergens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAllergenRequest"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeatureRequest"
            }
          },
          "is_deleted": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "available_quantity",
          "g_per_unit",
          "images",
          "price_per_unit",
          "title",
          "unit"
        ]
      },
      "ListingImage": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": ["image"]
      },
      "ListingImageRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": ["image"]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "text": {
            "type": "string",
            "maxLength": 2000
          },
          "message_type": {
            "$ref": "#/components/schemas/MessageTypeEnum"
          },
          "read_by_recipient": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "sender": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["created_at", "id", "message_type", "text", "updated_at"]
      },
      "MessageTypeEnum": {
        "enum": [
          "TEXT_MESSAGE",
          "LOCATION_MESSAGE",
          "REVIEW_ORDER",
          "REPORT_CONFIRMATION"
        ],
        "type": "string",
        "description": "* `TEXT_MESSAGE` - TEXT_MESSAGE\n* `LOCATION_MESSAGE` - LOCATION_MESSAGE\n* `REVIEW_ORDER` - REVIEW_ORDER\n* `REPORT_CONFIRMATION` - REPORT_CONFIRMATION"
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "notification_type": {
            "$ref": "#/components/schemas/NotificationTypeEnum"
          },
          "data": {
            "type": "object",
            "additionalProperties": {}
          },
          "is_read": {
            "type": "boolean"
          },
          "receiver": {
            "type": "integer"
          }
        },
        "required": [
          "created_at",
          "data",
          "id",
          "notification_type",
          "receiver",
          "updated_at"
        ]
      },
      "NotificationTypeEnum": {
        "enum": [
          "CHAT_MESSAGE",
          "NEW_LISTING",
          "NEW_REVIEW",
          "NEW_LIKE",
          "REVIEW_ORDER",
          "REMINDER_COMPLETE_PROFILE",
          "REPORT_CONFIRMATION"
        ],
        "type": "string",
        "description": "* `CHAT_MESSAGE` - CHAT_MESSAGE\n* `NEW_LISTING` - NEW_LISTING\n* `NEW_REVIEW` - NEW_REVIEW\n* `NEW_LIKE` - NEW_LIKE\n* `REVIEW_ORDER` - REVIEW_ORDER\n* `REMINDER_COMPLETE_PROFILE` - REMINDER_COMPLETE_PROFILE\n* `REPORT_CONFIRMATION` - REPORT_CONFIRMATION"
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "listing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicListing"
              }
            ],
            "readOnly": true
          },
          "consumer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicUser"
              }
            ],
            "readOnly": true
          },
          "is_reviewed": {
            "type": "boolean",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "total_price": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          }
        },
        "required": [
          "consumer",
          "created_at",
          "id",
          "is_reviewed",
          "listing",
          "quantity",
          "total_price",
          "updated_at"
        ]
      },
      "OrderCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "consumer": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "total_price": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "listing": {
            "type": "integer"
          }
        },
        "required": [
          "created_at",
          "id",
          "listing",
          "quantity",
          "total_price",
          "updated_at"
        ]
      },
      "OrderCreateRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "consumer": {
            "type": "integer"
          },
          "total_price": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "listing": {
            "type": "integer"
          }
        },
        "required": ["listing", "quantity", "total_price"]
      },
      "PasswordChangeRequest": {
        "type": "object",
        "properties": {
          "new_password1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          }
        },
        "required": ["new_password1", "new_password2"]
      },
      "PasswordResetConfirmRequest": {
        "type": "object",
        "description": "Serializer for confirming a password reset attempt.",
        "properties": {
          "new_password1": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "new_password2": {
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "uid": {
            "type": "string",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": ["new_password1", "new_password2", "token", "uid"]
      },
      "PasswordResetRequest": {
        "type": "object",
        "description": "Serializer for requesting a password reset e-mail.",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 1
          }
        },
        "required": ["email"]
      },
      "PatchedCustomUserDetailsRequest": {
        "type": "object",
        "description": "User model w/o password",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "photo": {
            "type": "string",
            "format": "binary"
          },
          "phone": {
            "type": "string",
            "minLength": 1
          },
          "location": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["Point"]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                },
                "example": [12.9721, 77.5933],
                "minItems": 2,
                "maxItems": 3
              }
            },
            "nullable": true
          }
        }
      },
      "PatchedListingCreateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingImageRequest"
            }
          },
          "unit": {
            "$ref": "#/components/schemas/UnitEnum"
          },
          "price_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 1
          },
          "g_per_unit": {
            "type": "integer",
            "maximum": 100000,
            "minimum": 0
          },
          "available_quantity": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1
          },
          "allergens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAllergenRequest"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeatureRequest"
            }
          },
          "is_deleted": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "PatchedProducerRequest": {
        "type": "object",
        "properties": {
          "is_deleted": {
            "type": "boolean"
          },
          "biography": {
            "type": "string",
            "maxLength": 3000
          }
        }
      },
      "Producer": {
        "type": "object",
        "properties": {
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "is_deleted": {
            "type": "boolean"
          },
          "biography": {
            "type": "string",
            "maxLength": 3000
          }
        },
        "required": ["user"]
      },
      "ProducerRequest": {
        "type": "object",
        "properties": {
          "is_deleted": {
            "type": "boolean"
          },
          "biography": {
            "type": "string",
            "maxLength": 3000
          }
        }
      },
      "ProductAllergen": {
        "type": "object",
        "properties": {
          "allergen": {
            "$ref": "#/components/schemas/AllergenEnum"
          }
        },
        "required": ["allergen"]
      },
      "ProductAllergenRequest": {
        "type": "object",
        "properties": {
          "allergen": {
            "$ref": "#/components/schemas/AllergenEnum"
          }
        },
        "required": ["allergen"]
      },
      "ProductFeature": {
        "type": "object",
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/FeatureEnum"
          }
        },
        "required": ["feature"]
      },
      "ProductFeatureRequest": {
        "type": "object",
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/FeatureEnum"
          }
        },
        "required": ["feature"]
      },
      "ReportCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "reported": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "maxLength": 2000
          },
          "is_resolved": {
            "type": "boolean",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "description",
          "id",
          "is_resolved",
          "updated_at"
        ]
      },
      "ReportCreateRequest": {
        "type": "object",
        "properties": {
          "reported": {
            "type": "integer"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "order": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["description"]
      },
      "RestAuthDetail": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["detail"]
      },
      "Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "rating": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 150
          }
        },
        "required": ["created_at", "id", "order", "rating", "updated_at"]
      },
      "ReviewCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "rating": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "maxLength": 500
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "order": {
            "type": "integer"
          }
        },
        "required": ["created_at", "id", "order", "rating", "updated_at"]
      },
      "ReviewCreateRequest": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1
          },
          "comment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          },
          "order": {
            "type": "integer"
          }
        },
        "required": ["order", "rating"]
      },
      "Token": {
        "type": "object",
        "description": "Serializer for Token model.",
        "properties": {
          "key": {
            "type": "string",
            "maxLength": 40
          }
        },
        "required": ["key"]
      },
      "UnitEnum": {
        "enum": ["KG", "UNIT"],
        "type": "string",
        "description": "* `KG` - kilogram\n* `UNIT` - unitary"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "maxLength": 150
          },
          "photo": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 20
          },
          "location": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["Point"]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                },
                "example": [12.9721, 77.5933],
                "minItems": 2,
                "maxItems": 3
              }
            },
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "average_rating": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "number_ratings": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "average_rating",
          "created_at",
          "first_name",
          "id",
          "last_name",
          "number_ratings"
        ]
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 150
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 20
          },
          "location": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["Point"]
              },
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number",
                  "format": "float"
                },
                "example": [12.9721, 77.5933],
                "minItems": 2,
                "maxItems": 3
              }
            },
            "nullable": true
          }
        },
        "required": ["first_name", "last_name"]
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionid"
      },
      "jwtAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost/api/v1",
      "description": "Local development server"
    }
  ]
}
