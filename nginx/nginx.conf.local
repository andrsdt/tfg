worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 1024;
  multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;

  # Optimization: enable caching of HTTP responses
  # proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
  # proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
  # proxy_cache_valid any 30m;
  # proxy_cache_bypass $http_pragma;
  # proxy_cache_revalidate on;

  # Optimization: enable keep-alive connections
  keepalive_timeout 65;
  keepalive_requests 100;

  upstream server {
    server localhost:8000;
  }

  upstream client {
    server localhost:3000;
  }
  

  server {
    listen 80;
    server_name grocerin.test 127.0.0.1;
    client_max_body_size 8M; # Allow large file uploads (for products and images)

    error_page 400 401 402 403 404 405 408 413 415 418 422 429 431 451 @handle_client_error;

    location @handle_client_error {
    return 200 '{"type":"client_error","errors":[{"code":"$error_code","detail":"$error_message","attr":null}]}';
  }

    location ~ ^/(api|media) {
      # Optimization: use caching for API responses
      # proxy_cache my_cache;
      # proxy_cache_methods GET HEAD;
      # proxy_cache_lock on;
      # proxy_cache_valid 200 30s;
      
      proxy_pass http://server;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
    }

    location ~ ^/ws {
      # Optimization: use caching for API responses
      # proxy_cache my_cache;
      # proxy_cache_methods GET HEAD;
      # proxy_cache_lock on;
      # proxy_cache_valid 200 30s;
      
      proxy_pass http://server;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
    }

    location / {
      # Optimization: use caching for static files
      # proxy_cache my_cache;
      # proxy_cache_methods GET HEAD;
      # proxy_cache_lock on;
      # proxy_cache_valid 200 30m;
      
      proxy_pass http://client;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

  }
  
  map $status $error_message {
    default "Ha ocurrido un error. Inténtalo de nuevo más tarde";
    400 "La petición no es válida";
    401 "No estás autorizado para realizar esta acción";
    402 "Pago requerido";
    403 "No estás autorizado para realizar esta acción";
    404 "Not hemos encontrado el recurso en nuestros servidores";
    405 "Este método no está permitido para esta ruta";
    408 "La petición ha tardado demasiado tiempo en procesarse";
    413 "Estás intentando subir archivos demasiado grandes";
    415 "Este tipo de archivo no está permitido";
    418 "Soy una tetera!";
    422 "La petición no se puede procesar";
    429 "Has realizado demasiadas peticiones en poco tiempo";
    431 "La petición es demasiado grande";
    451 "No podemos procesar tu petición por razones legales";
  }

  map $status $error_code {
    default "unknown_error";
    400 "bad_request";
    401 "unauthorized";
    402 "payment_required";
    403 "forbidden";
    404 "not_found";
    405 "method_not_allowed";
    408 "request_timeout";
    413 "request_entity_too_large";
    415 "unsupported_media_type";
    418 "im_a_teapot";
    422 "unprocessable_entity";
    429 "too_many_requests";
    431 "request_header_fields_too_large";
    451 "unavailable_for_legal_reasons";
  }
}
