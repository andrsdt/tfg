worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 1024;
  multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;

  # Optimization: enable caching of HTTP responses
  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
  proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
  proxy_cache_valid any 30m;
  proxy_cache_bypass $http_pragma;
  proxy_cache_revalidate on;

  # Optimization: enable keep-alive connections
  keepalive_timeout 65;
  keepalive_requests 100;

  upstream server {
    server localhost:8000;
  }

  upstream client {
    server localhost:3000;
  }

  server{
    listen 80;
    server_name grocerin.test 127.0.0.1;
    return 301 https://$host$request_uri;
}

  server {
    listen 443 ssl http2;
    server_name grocerin.test 127.0.0.1;
    ssl_certificate C:\\nginx\\certs\\grocerin.crt;
    ssl_certificate_key C:\\nginx\\certs\\grocerin.key;
    ssl_ciphers HIGH:!aNULL:!MD5;
    
    location /api {
      # Optimization: use caching for API responses
      proxy_cache my_cache;
      proxy_cache_methods GET HEAD;
      proxy_cache_lock on;
      proxy_cache_valid 200 30s;
      
      proxy_pass http://server;
      proxy_set_header X-Forwarded-For $remote_addr;
    }

    location / {
      # Optimization: use caching for static files
      proxy_cache my_cache;
      proxy_cache_methods GET HEAD;
      proxy_cache_lock on;
      proxy_cache_valid 200 30m;
      
      proxy_pass http://client;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }
}
